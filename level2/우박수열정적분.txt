using System;
using System.Collections.Generic;
public class Solution 
{
    public double[] solution(int k, int[,] ranges)
    {
        List<double> answer = new List<double>();
        double d = (double)k;
        List<double> list = new List<double>();
        Queue<double> queue = new Queue<double>();
        while (d != 1)
        {
            queue.Enqueue(d);
            if (d % 2 == 0)
            {
                d = d / 2;
            }
            else
            {
                d = (d * 3) + 1;
            }
        }
        queue.Enqueue(1);
        double q = queue.Dequeue();
        
        while (queue.Count > 0)
        {
            double temp = queue.Dequeue();
            double rect = (q + temp) / 2;
            list.Add(rect);
            q = temp;
        }

        int count = list.Count;
        
        for (int i=0; i < ranges.GetLength(0); i++)
        {
            int start = ranges[i, 0];
            int end = count + ranges[i, 1];
            double size = 0;

            if (start > end)
            {
                size += -1;
            }
            else
            {
                for (int j = start; j < end; j++)
                {
                    size += list[j];
                }
            }
            
            answer.Add(size);
        }
        double[] result = answer.ToArray();
        return result;

    }
}