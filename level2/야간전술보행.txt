using System;
using System.Collections.Generic;
public class Solution 
{
    public int solution(int distance, int[,] scope, int[,] times)
    {

        int[,] cloneTimes = times.Clone() as int[,];
        //int[,] cloneTimes = (int[,]) times.Clone();
        // int[,] cloneTimes = times.Clone() as int[,];
        int a = scope.GetLength(0);
        int b = scope.GetLength(1);
        int[,] sortedScope = new int[a, b];
        for (int i=0; i<scope.GetLength(0); i++)
        {
            List<int> list = new List<int>();
            for (int j=0; j<scope.GetLength(1); j++)
            {
                list.Add(scope[i, j]);
            }
            list.Sort();
            
            for (int k=0; k<list.Count; k++)
            {
                sortedScope[i, k] = list[k];
            }
        }
        //start = false
        bool[] state = new bool[a];
        int start = 0;
        while (distance > 0)
        {
            start++;
            distance--;

            for(int i=0; i< cloneTimes.GetLength(0); i++)
            {
                if ( (cloneTimes[i,0] > 0) && (cloneTimes[i,1] > 0))
                {
                    cloneTimes[i, 0] -= 1;
                    state[i] = false;
                }
                else 
                {
                    cloneTimes[i, 1] -= 1;
                    state[i] = true;
                }   
            }
            for(int i=0; i<times.GetLength(0); i++)
            {
                if ( (start >= sortedScope[i, 0]) && (start <= sortedScope[i, 1]) )
                {
                    if (state[i] == false)
                    {
                        return start;
                    }
                }
            }
            for (int i = 0; i < cloneTimes.GetLength(0); i++)
            {
                if ((cloneTimes[i, 0] == 0) && (cloneTimes[i, 1] == 0))
                {
                    cloneTimes[i, 0] = times[i, 0];
                    cloneTimes[i, 1] = times[i, 1];
                }
            }

        }

        return start;
    }
}